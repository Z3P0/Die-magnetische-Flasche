/*
 * Camera.cpp
 *
 *  Created on: Jan 9, 2016
 *      Author: Usama Tariq
 */

#include "Camera.h"
#include "../../Define/Define.h"
#include "../../Extern/Extern.h"
#include "HALSCCB.h"
#include "Dcmi.h"

#include "stm32f4xx.h"
#include "stm32f4xx_gpio.h"
#include "stm32f4xx_rcc.h"
#include "stm32f4xx_i2c.h"

//#include "utility"

uint8_t init_registers[][2]  = {
		{0x3a, 0x04},
		{0x40, 0xd0},
		{0x32, 0x80},
		{0x17, 0x16},
		{0x18, 0x04},
		{0x19, 0x02},
		{0x1a, 0x7b},//0x7a,
		{0x03, 0x06},//0x0a,
		{0x12, 0x14},
		{ 0x0c, 0x04 }, // COM3
		{ 0x3e, 0x1A }, // COM14
		{ 0x70, 0x3a }, // SCALING_XSC
		{ 0x71, 0x35 }, // SCALING_YSC
		{ 0x72, 0xee }, // SCALING_DCWCTR
		{ 0x73, 0xf2 }, // SCALING_PCLK_DIV
		{ 0xa2, 0x02 }, // SCALING_PCLK_DELAY
		{0x11, 0x01},
		{0x7a, 0x20},
		{0x7b, 0x1c},
		{0x7c, 0x28},
		{0x7d, 0x3c},
		{0x7e, 0x55},
		{0x7f, 0x68},
		{0x80, 0x76},
		{0x81, 0x80},
		{0x82, 0x88},
		{0x83, 0x8f},
		{0x84, 0x96},
		{0x85, 0xa3},
		{0x86, 0xaf},
		{0x87, 0xc4},
		{0x88, 0xd7},
		{0x89, 0xe8},
		{0x13, 0xe0},
		{0x00, 0x00},//AGC
		{0x10, 0x00},
		{0x0d, 0x00},
		{0x14, 0x20},//0x38, limit the max gain
		{0xa5, 0x05},
		{0xab, 0x07},
		{0x24, 0x75},
		{0x25, 0x63},
		{0x26, 0xA5},
		{0x9f, 0x78},
		{0xa0, 0x68},
		{0xa1, 0x03},//0x0b,
		{0xa6, 0xdf},//0xd8,
		{0xa7, 0xdf},//0xd8,
		{0xa8, 0xf0},
		{0xa9, 0x90},
		{0xaa, 0x94},
		{0x13, 0xe5},
		{0x0e, 0x61},
		{0x0f, 0x4b},
		{0x16, 0x02},
		{0x1e, 0x37},//0x07,
		{0x21, 0x02},
		{0x22, 0x91},
		{0x29, 0x07},
		{0x33, 0x0b},
		{0x35, 0x0b},
		{0x37, 0x1d},
		{0x38, 0x71},
		{0x39, 0x2a},//
		{0x3c, 0x78},
		{0x4d, 0x40},
		{0x4e, 0x20},
		{0x69, 0x0c},///////////////////////
		{0x6b, 0x80},//PLL  30 FPS bei DIV 1
//		{0x6b, 0x60},//PLL	20 FPS bei DIV 2
		{0x74, 0x19},
		{0x8d, 0x4f},
		{0x8e, 0x00},
		{0x8f, 0x00},
		{0x90, 0x00},
		{0x91, 0x00},
		{0x92, 0x00},//0x19,//0x66
		{0x96, 0x00},
		{0x9a, 0x80},
		{0xb0, 0x84},
		{0xb1, 0x0c},
		{0xb2, 0x0e},
		{0xb3, 0x82},
		{0xb8, 0x0a},
		{0x43, 0x14},
		{0x44, 0xf0},
		{0x45, 0x34},
		{0x46, 0x58},
		{0x47, 0x28},
		{0x48, 0x3a},
		{0x59, 0x88},
		{0x5a, 0x88},
		{0x5b, 0x44},
		{0x5c, 0x67},
		{0x5d, 0x49},
		{0x5e, 0x0e},
		{0x64, 0x04},
		{0x65, 0x20},
		{0x66, 0x05},
		{0x94, 0x04},
		{0x95, 0x08},
		{0x6c, 0x0a},
		{0x6d, 0x55},
		{0x6e, 0x11},
		{0x6f, 0x9f},//0x9e for advance AWB
		{0x6a, 0x40},
		{0x01, 0x40},
		{0x02, 0x40},
		{0x13, 0xe7},
		{0x15, 0x08},
		{0x4f, 0x80},
		{0x50, 0x80},
		{0x51, 0x00},
		{0x52, 0x22},
		{0x53, 0x5e},
		{0x54, 0x80},
		{0x58, 0x9e},
		{0x41, 0x08},
		{0x3f, 0x00},
		{0x75, 0x05},
		{0x76, 0xe1},
		{0x4c, 0x00},
		{0x77, 0x01},
		{0x3d, 0xc2},	//0xc0,
		{0x4b, 0x09},
		{0xc9, 0xc0},
		{0x41, 0x38},
		{0x56, 0x40},//0x40,  change according to Jim's request
		{0x34, 0x11},
		{0x3b, 0x02},//0x00,//0x02,
		{0xa4, 0x89},//0x88,
		{0x96, 0x00},
		{0x97, 0x30},
		{0x98, 0x20},
		{0x99, 0x30},
		{0x9a, 0x84},
		{0x9b, 0x29},
		{0x9c, 0x03},
		{0x9d, 0x4c},
		{0x9e, 0x3f},
		{0x78, 0x04},
		{0x79, 0x01},
		{0xc8, 0xf0},
		{0x79, 0x0f},
		{0xc8, 0x00},
		{0x79, 0x10},
		{0xc8, 0x7e},
		{0x79, 0x0a},
		{0xc8, 0x80},
		{0x79, 0x0b},
		{0xc8, 0x01},
		{0x79, 0x0c},
		{0xc8, 0x0f},
		{0x79, 0x0d},
		{0xc8, 0x20},
		{0x79, 0x09},
		{0xc8, 0x80},
		{0x79, 0x02},
		{0xc8, 0xc0},
		{0x79, 0x03},
		{0xc8, 0x40},
		{0x79, 0x05},
		{0xc8, 0x30},
		{0x79, 0x26},
		{0x09, 0x03},
		{0x55, 0x00},
		{0x56, 0x40},
		{0x3b, 0x42},//0x82,//0xc0,//0xc2,	//night mode
		// #########################################################################
		// END MARKER
		{ 0xff, 0xff },
};

HAL_GPIO reset(GPIO_010); //PA10
HAL_GPIO power(GPIO_033); //PC1
HAL_GPIO ledo(GPIO_061);
HAL_SCCB sccb;


uint8_t DCMI_Buffer[IMAGESIZE];

Dcmi dcmi(IMAGESIZE, (uint32_t) DCMI_Buffer, FRAMERATE, CAPTUREMODE);

void delayx(unsigned int ms) {
	//4694 = 1 ms
	while (ms > 1) {
		ms--;
		asm("nop");
	}
}


Camera::Camera() {
	// TODO Auto-generated constructor stub

}



Camera::~Camera() {
	// TODO Auto-generated destructor stub
}

void Camera::init()
{
	PRINTF("starting cam init\n");

	ledo.init(true);
	reset.init(true);
	power.init(true);
	reset.setPins(1);	//Cam reset passive(high)
	power.setPins(0);	//Cam power up (low)
	ledo.setPins(1);

	PRINTF("Init I2C...");
	delayx(1000);
	//sccb.init();
	PRINTF("Done!\n");
	PRINTF("Init OV7670...");
	delayx(1000);
	//initRegisters();
	PRINTF("Done!\n");

	delayx(1000);
	PRINTF("Init GPIOs...");
	dcmi.InitGPIO();
	PRINTF("Done!\n");
	delayx(1000);
	PRINTF("Init DCMI...");
	dcmi.InitDCMI();
	PRINTF("Done!\n");

	PRINTF("Enable DCMI...");
	delayx(1000);
	dcmi.EnableDCMI();

	PRINTF("Done with cam init!\n");

	//for(int us=0; us<5000000; us++) asm("nop");

//	suspendCallerUntil(NOW() + 5000*MILLISECONDS);
	for(int i = 0; i< IMAGESIZE; i++)
		printf("%d \r\n", DCMI_Buffer[i]);
}

void Camera::initTimer(){
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_ClockSecuritySystemCmd(ENABLE);

	/* Enable GPIOs clocks */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource8, GPIO_AF_MCO);

	/* Configure MCO (PA8) */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);

	RCC_MCO1Config(RCC_MCO1Source_PLLCLK, RCC_MCO1Div_4);
}

void Camera::initRegisters()
{
	//PRINTF("starting InitOV7670 init\n");
	uint16_t x = 0;
	int res = 0;
	res = sccb.write_reg(0x12, 0x80);
	res = sccb.write_reg(0x12, 0x00);

	while (init_registers[x][0] != 0xFF && init_registers[x][1] != 0xFF) {
		PRINTF("init register: status x=%d\n", x);

		res = sccb.write_reg((unsigned char) init_registers[x][0], (unsigned char) init_registers[x][1]);
		uint8_t read = sccb.read_reg((unsigned char) init_registers[x][0]);
		PRINTF("SCCB Init %d: reg 0x%x = 0x%x = 0x%x \n", x, init_registers[x][0], init_registers[x][1], read);
//		if (res) {
//			PRINTF("ERROR I2C %d\n", res);
//		}
		x++;
	}
}

